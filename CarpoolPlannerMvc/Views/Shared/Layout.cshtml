@using CarpoolPlanner;
@using CarpoolPlanner.Model;

<!DOCTYPE html>
<html lang="en" ng-app="ngNetApp">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@((!string.IsNullOrEmpty(ViewBag.Title) ? ViewBag.Title + " - " : "") + AppUtils.AppName)</title>
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min.js"></script>
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet" />
  <link href="~/Content/Site.css" rel="stylesheet" />
  <script type="text/javascript">
    var ngNetApp = angular.module('ngNetApp', []);

    ngNetApp.controller('ngNetCtrl', ['$scope', '$http', function($scope, $http) {
      $scope.userId = '@AppUtils.CurrentUserId';
      $scope.model = @Html.JSModel();

      // Posts the current model to the specified URL
      $scope.submitModel = function(url) {
        return $http.post(url, this.model)
          .success(function(result) {
            if (result.redirectUrl) {
              location.href = result.redirectUrl;
            } else {
              if (result.model != null)
                $scope.model = result.model;
              if (result.userId != null)
                $scope.userId = result.userId;
            }
          })
          .error(function(result) {
            var msg = "An unexpected error occurred. Please report this error to the website administrator.";
            if (result && result != '' && result.indexOf('<!DOCTYPE') !== 0)
              msg += "\nThe error is: " + result;
            $scope.model.Message = msg;
            $scope.model.MessageType = 2;
          });
      };
    }]);

    ngNetApp.controller('validationCtrl', ['$scope', function($scope) {
      $scope.validateForm = function(form) {
        this.validationErrors = [];
        if (form.$valid) {
          return true;
        } else {
          // Display validation summary
          var msg = '';
          var jqForm = $('[name=' + form.$name + ']');
          jqForm.find('.ng-invalid').each(function (i, elem) {
            // TODO: allow different types of error messages.
            var currentMsg = $(elem).attr('error-message');
            if (currentMsg)
              $scope.validationErrors.push(currentMsg);
            // Move focus to the first invalid control
            if (i == 0)
              elem.focus();
          });
          return false;
        }
      };
    }]);
  </script>
</head>
<body ng-controller="ngNetCtrl as ngNet">
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        @Html.ActionLink(AppUtils.AppName, "Index", "Home", null, new { @class = "navbar-brand" })
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          @if (AppUtils.IsUserAuthenticated())
          {
            <li>@Html.ActionLink("Home", "Index", "Home")</li>
            <li>@Html.ActionLink("Trips", "Trips", "Home")</li>
            if (AppUtils.IsUserStatus(UserStatus.Active))
            {
              <li>@Html.ActionLink("Users", "List", "User")</li>
            }
          }
        </ul>
        <ul class="nav navbar-nav navbar-right">
          @if (AppUtils.IsUserAuthenticated())
          {
            <li>@Html.ActionLink("{{ userId }}", "Manage", "User")</li>
            <li>@Html.ActionLink("Logout", "Logout", "User")</li>
          }
          else
          {
            <li>@Html.ActionLink("Register", "Register", "User")</li>
            <li>@Html.ActionLink(Resources.Login, "Login", "User")</li>
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="container body-content">
    @RenderBody()
  </div>
  @RenderSection("scripts", required: false)
</body>
</html>
