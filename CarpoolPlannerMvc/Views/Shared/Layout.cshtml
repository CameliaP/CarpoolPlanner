@using CarpoolPlanner;
@using CarpoolPlanner.Model;

<!DOCTYPE html>
<html lang="en" ng-app="ngNetApp">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>@((!string.IsNullOrEmpty(ViewBag.Title) ? ViewBag.Title + " - " : "") + AppUtils.AppName)</title>
  <link href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet" />
  <link href="/Content/datetimepicker.css" rel="stylesheet" />
  <link href="~/Content/Site.css" rel="stylesheet" />
  <!-- Load angular in the head to make sure the user never sees {{ xxx }} flash at the beginning -->
  <script src="//ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min.js"></script>
  <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.1/js/bootstrap.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.4/moment.min.js"></script>
  <script src="/Content/datetimepicker.js"></script>
  <script type="text/javascript">
    var ngNetApp = angular.module('ngNetApp', ['ui.bootstrap.datetimepicker']);

    ngNetApp.controller('ngNetCtrl', ['$scope', '$http', function($scope, $http) {
      $scope.userId = '@AppUtils.CurrentUserId';
      $scope.model = @Html.JSModel();

      // Posts the current model to the specified URL
      $scope.submitModel = function(url) {
        return $http.post(url, this.model)
          .success(function(result) {
            if (result.redirectUrl) {
              location.href = result.redirectUrl;
            } else {
              if (result.model != null)
                $scope.model = result.model;
              if (result.userId != null)
                $scope.userId = result.userId;
            }
          })
          .error(function(result) {
            var msg = "An unexpected error occurred. Please report this error to the website administrator.";
            if (result && result != '' && result.indexOf('<!DOCTYPE') === -1)
              msg += "\nThe error is: " + result;
            $scope.model.Message = msg;
            $scope.model.MessageType = 2;
          });
      };
    }]);

    ngNetApp.controller('validationCtrl', ['$scope', function($scope) {
      var validationMessages = {
        required: '$1 is required.',
        $default: '$1 is invalid.'
      };
      $scope.validateForm = function(form) {
        $scope.validationErrors = [];
        if (form.$valid) {
          return true;
        } else {
          // Display validation summary
          for (var validator in form.$error) {
            for (var i in form.$error[validator]) {
              var field = form.$error[validator][i];
              var name = field.friendlyName || field.$name || 'Unnamed field';
              var message = validationMessages[validator] || validationMessages.$default;
              message = message.replace(/\$1(?![0-9])/g, name);
              $scope.validationErrors.push(message);
            }
          }
          // Move focus to the first invalid control (NOTE: only works if form has a name)
          if (form.$name) {
            var elems = $("[name=" + form.$name + "] .ng-invalid");
            if (elems.length > 0)
              elems[0].focus();
          }
          return false;
        }
      };

    }]);
    
    ngNetApp.directive('datetimeFormat', ['$window', function ($window) {
      return {
        require: 'ngModel',
        restrict: 'A',
        link: function (scope, elm, attrs, ctrl) {
          var moment = $window.moment;
          var format = attrs.datetimeFormat;
          attrs.$observe('datetimeFormat', function (newValue) {
            if (format == newValue || !ctrl.$modelValue)
              return;
            format = newValue;
            ctrl.$modelValue = new Date(ctrl.$setViewValue);
          });

          ctrl.$formatters.unshift(function (modelValue) {
            if (!format || !modelValue)
              return "";
            var retVal = moment(modelValue).format(format);
            return retVal;
          });

          ctrl.$parsers.unshift(function (viewValue) {
            if (viewValue instanceof Date)
              return viewValue;
            if (ctrl.$isEmpty(viewValue)) {
              return '';
            }
            // Try to parse using the expected format. If that fails, use the default date parser.
            var moDate = moment(viewValue, format);
            if (!moDate.isValid())
              moDate = moment(viewValue);
            var date = moDate.toDate();
            return date;
          });

          ctrl.$validators.datetime = function(modelValue, viewValue) {
            // consider empty values to be valid
            if (ctrl.$isEmpty(viewValue)) {
              return true;
            }
            if (viewValue instanceof Date) {
              return true;
            }
            // Try to parse using the expected format. If that fails, use the default date parser.
            var moDate = moment(viewValue, format);
            if (!moDate.isValid())
              moDate = moment(viewValue);
            if (moDate && moDate.isValid() && moDate.year() > 1950) {
              return true;
            }
            return false;
          };
        }
      };

    }]);
    
    ngNetApp.directive('friendlyName', function () {
      return {
        require: 'ngModel',
        restrict: 'A',
        link: function (scope, elm, attrs, ctrl) {
          ctrl.friendlyName = attrs.friendlyName;
          attrs.$observe('friendlyName', function (newValue) {
            ctrl.friendlyName = newValue;
          });
        }
      };
    });
  </script>
  @RenderSection("headScripts", required: false)
</head>
<body ng-controller="ngNetCtrl as ngNet">
  <div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        @Html.ActionLink(AppUtils.AppName, "Index", "Home", null, new { @class = "navbar-brand" })
      </div>
      <div class="navbar-collapse collapse">
        <ul class="nav navbar-nav">
          @if (AppUtils.IsUserAuthenticated())
          {
            <li>@Html.ActionLink("Home", "Index", "Home")</li>
            <li>@Html.ActionLink(Resources.AvailableCarpools, "Index", "Trips")</li>
            if (AppUtils.IsUserStatus(UserStatus.Active))
            {
              <li>@Html.ActionLink("Users", "List", "User")</li>
            }
          }
        </ul>
        <ul class="nav navbar-nav navbar-right">
          @if (AppUtils.IsUserAuthenticated())
          {
            <li>@Html.ActionLink("{{ userId }}", "Manage", "User")</li>
            <li>@Html.ActionLink("Logout", "Logout", "User")</li>
          }
          else
          {
            <li>@Html.ActionLink("Register", "Register", "User")</li>
            <li>@Html.ActionLink(Resources.Login, "Login", "User")</li>
          }
        </ul>
      </div>
    </div>
  </div>
  <div class="container body-content">
    @RenderBody()
  </div>
  @RenderSection("scripts", required: false)
</body>
</html>
