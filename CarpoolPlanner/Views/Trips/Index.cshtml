@using CarpoolPlanner;
@using CarpoolPlanner.Model;
@using CarpoolPlanner.ViewModel;

@{
  ViewBag.Title = Resources.AvailableCarpools;
  Layout = "~/Views/Shared/Layout.cshtml";
}
@section headScripts{
<script type="text/javascript">

  var tripCtrl = app.controller('tripCtrl', function($scope, $http, $timeout, $location) {
    @(Html.JSClass<TripRecurrence>())
    var search = $location.search();
    $scope.justRegistered = search.justRegistered == 'true';
    $scope.editModel = {};
    $scope.saveTrips = function() {
      var scope = this;
      scope.trySubmit(scope.tripRecurrenceForm, '@Url.Action("Index")', $scope.model, 'tripsModel', function() {
        $scope.model.tripsModel.message = 'Saving...';
        $scope.model.tripsModel.messageType = $scope.MessageType.Info;
        $scope.model.createModel.message = '';
      }).success(function(result) {
        if (result.model && result.model.messageType == MessageType.Success) {
          // Set the form as pristine so the user won't get "unsaved data" warnings
          scope.tripRecurrenceForm.$setPristine();
        }
      });
    };
    $scope.createTrip = function() {
      var form = this.createTripForm;
      this.trySubmit(form, '@Url.Action("CreateTrip")', $scope.model, 'createModel', function() {
        $scope.model.createModel.message = 'Creating...';
        $scope.model.createModel.messageType = $scope.MessageType.Info;
        $scope.model.tripsModel.message = '';
      }).success(function(result) {
        if (result.model.messageType === $scope.MessageType.Success) {
          // Add the created trip to the list
          $scope.model.tripsModel.trips.push(result.model.savedTrip);
          // If the trip was created successfully, treat the create trip like a new form
          // (so pretend it was never submitted, otherwise errors will appear)
          form.$setPristine();
          form.$setUntouched();
        }
      });
    };
    $scope.editTrip = function(index) {
      var scope = this;
      $scope.editModel.message = '';
      $scope.model.tripsModel.message = '';
      var trip = scope.model.tripsModel.trips[index];
      if (trip == null)
        return;
      var form = scope.editTripForm;
      var sameTrip = false;
      if (form.$dirty && scope.editModel && scope.editModel.trip) {
        // User is currently editing a trip. Do some checks before discarding unsaved data.
        if (scope.editModel.trip.id == trip.id) {
          sameTrip = true;
        } else {
          if (!confirm('You are currently editing "' + scope.editModel.trip.name + '". Do you want to discard those edits?'))
            return;
          form.$setPristine();
          form.$setUntouched();
        }
      }
      if (!sameTrip) {
        $scope.editModel.trip = angular.copy(trip);
        $scope.editModel.originalName = $scope.editModel.trip.name;
      }
      $timeout(function() {
        // Focus the first field in the form
        $('#editTripForm input[type=text]').first().focus();
        // Scroll down to the form
        var formElem = $("#editTripForm");
        var offset = formElem.offset();
        var navHeight = $(".navbar").height()
        var newTop = offset.top - navHeight;
        $('html, body').animate({
          scrollTop: newTop
        }, 500);
      }, 1);
    };
    $scope.cancelEditTrip = function() {
      $scope.model.tripsModel.message = '';
      var form = this.editTripForm;
      $scope.editModel.trip = null;
      form.$setPristine();
      form.$setUntouched();
      // Scroll back to the top
      $('html, body').scrollTop(0);
    };
    $scope.updateTrip = function() {
      var scope = this;
      var form = scope.editTripForm;
      scope.trySubmit(form, '@Url.Action("UpdateTrip")', $scope, 'editModel', function() {
        $scope.editModel.message = 'Saving...';
        $scope.editModel.messageType = $scope.MessageType.Info;
        $scope.model.tripsModel.message = '';
        $scope.model.createModel.message = '';
      }).success(function(result) {
        if (result && result.model) {
          scope.model.tripsModel.message = result.model.message;
          scope.model.tripsModel.messageType = result.model.messageType;
          if (result.model.messageType === $scope.MessageType.Success) {
            // Update created trip in the list
            for (var i = 0; i < $scope.model.tripsModel.trips.length; i++) {
              if ($scope.model.tripsModel.trips[i].id == result.model.savedTrip.id) {
                $scope.model.tripsModel.trips[i] = result.model.savedTrip;
                break;
              }
            }
            // If the trip was created successfully, treat the create trip like a new form
            // (so pretend it was never submitted, otherwise errors will appear)
            form.$setPristine();
            form.$setUntouched();
            // Scroll back to the top
            $('html, body').scrollTop(0);
          }
        }
      });
    };
    $scope.deleteTrip = function(index) {
      var scope = this;
      var trip = scope.model.tripsModel.trips[index];
      if (!confirm('Are you sure you want to delete "' + trip.name + '"?\nThis will remove ALL existing instances of that trip.'))
        return;

      scope.model.tripsModel.message = 'Deleting...';
      scope.model.tripsModel.messageType = $scope.MessageType.Info;
      $http.delete('@Url.Action("DeleteTrip")/' + trip.id).success(function(result) {
        if (result && result.model) {
          scope.model.tripsModel.message = result.model.message;
          scope.model.tripsModel.messageType = result.model.messageType;
          if (result.model.messageType === $scope.MessageType.Success) {
            scope.model.tripsModel.trips.splice(index, 1);
          }
        }
      }).error(function(result) {
        var message = '';
        if (typeof (result) == 'string') {
          message = result;
          scope.errorHandler(scope.model.tripsModel, message);
        }
        console.error('Error from server: ' + message);
      });
    };
  });

  app.directive('tripEditor', function() {
    return {
      restrict: 'E',
      scope: {
        trip: '='
      },
      templateUrl: '@Url.Content("~/TripEditor.html")',
      link: function(scope, elem, attr) {
        scope.addTripRecurrence = function(trip) {
          trip.recurrences.push(new TripRecurrence());
        };
        scope.removeTripRecurrence = function(trip, index) {
          trip.recurrences.splice(index, 1);
        };
        scope.tripRecurrenceToString = scope.$parent.tripRecurrenceToString;
      }
    };
  })
</script>
}

<h1>@Resources.AvailableCarpools</h1>
<div class="row" ng-controller="tripCtrl">
  <div class="col-md-12">
    <p ng-if="justRegistered" class="text-success">
      Thank you for registering!
    </p>
    <p ng-if="user.status == UserStatus.Unapproved">
      Your account currently has limited access until you are approved by an administrator.<br />
      While you wait to be approved, you can fill out this page.
    </p>
    <p>
      Select the days you plan on coming. You will receive
      <a href="@Url.Action("Index", "Notifications")" target="_blank" title="How do notifications work?">notifications</a>
      only on the days that you select.
    </p>

    <form method="post" name="tripRecurrenceForm" ng-submit="saveTrips()" novalidate warn-if-dirty focus-first-invalid>
      <div ng-repeat="trip in model.tripsModel.trips">
        <h3 class="editable-region-header">
          <label class="checkbox">
            <input type="checkbox" id="attending-{{ trip.id }}" ng-model="trip.userTrips[user.id].attending" ch-hierarchy="attending-{{ trip.id }}" />
            {{ trip.name }}
          </label>
        </h3>
        @if (AppUtils.CurrentUser.IsAdmin)
        {
          <div class="edit-buttons">
            <input type="button" value="Edit" ng-click="editTrip($index)" class="btn" style="margin-top: -10px; margin-right: 10px;" />
            <input type="button" value="Delete" ng-click="deleteTrip($index)" class="btn" style="margin-top: -10px;" />
          </div>
        }
        <div class="indent">
          <div ng-repeat="tripRecurrence in trip.recurrences" ng-init="userTripRecurrence = tripRecurrence.userTripRecurrences[user.id]" class="checkbox">
            <label>
              <input type="checkbox"
               ng-model="userTripRecurrence.attending"
               ch-hierarchy="attending-{{ trip.id + '.' + tripRecurrence.id }}" />
              {{ tripRecurrenceToString(tripRecurrence) }}
            </label>
          </div>
        </div>
      </div>
      <div class="form-group">
        <input type="submit" value="@Resources.Save" ng-show="model.tripsModel.trips.length > 0" class="btn btn-default" />
      </div>
      <div ng-show="model.tripsModel.trips.length === 0">There are currently no carpools. An administrator can create new carpools.</div>
      <div class="form-group">
        <cp-message model="model.tripsModel"></cp-message>
      </div>
    </form>
    @if (AppUtils.CurrentUser.IsAdmin)
    {
      <div ng-show="editModel.trip">
        <hr />
        <form method="post" name="editTripForm" id="editTripForm" ng-submit="updateTrip()" style="max-width: 700px;" novalidate warn-if-dirty focus-first-invalid>
          <h2>Edit Carpool - {{ editModel.originalName }}</h2>
          <trip-editor trip="editModel.trip"></trip-editor>
          <div class="form-group">
            <input type="submit" value="Save" class="btn btn-default" style="margin-right: 10px;" />
            <input type="button" value="Cancel" class="btn" ng-click="cancelEditTrip()" />
          </div>
          <div class="form-group">
            <cp-message model="editModel"></cp-message>
            <val-summary></val-summary>
          </div>
        </form>
      </div>
      <hr />
      <form method="post" name="createTripForm" ng-submit="createTrip()" style="max-width: 700px;" novalidate warn-if-dirty focus-first-invalid>
        <h2>Create New Carpool</h2>
        <trip-editor trip="model.createModel.trip"></trip-editor>
        <div class="form-group">
          <input type="submit" value="Create" class="btn btn-default" />
        </div>
        <div class="form-group">
          <cp-message model="model.createModel"></cp-message>
          <val-summary></val-summary>
        </div>
      </form>
    }
  </div>
</div>